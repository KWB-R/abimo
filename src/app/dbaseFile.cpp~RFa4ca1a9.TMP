#include <QString>
#include <QStringList>

#include "dbaseFile.h"
#include "dbaseField.h"
#include "helpers.h"

DbaseFile::DbaseFile(const QString& filePath) :
    m_file(filePath),
    m_version(""),
    m_languageDriver(""),
    //m_numberofFields(0),
    m_fields(),
    m_numberOfRecords(0),
    m_headerLength(0),
    //m_recordLength(0),
    m_error(""),
    m_fullError(""),
    m_fieldPositionMap()
{
    m_date = QDateTime::currentDateTime().date();
}

QString DbaseFile::getVersion() const
{
    return m_version;
}

QString DbaseFile::getLanguageDriver() const
{
    return m_languageDriver;
}

QDate DbaseFile::getDate() const
{
    return m_date;
}

int DbaseFile::getHeaderLength() const
{
    return m_headerLength;
}

/*
int DbaseFile::getRecordLength() const
{
    return m_recordLength;
}
*/

int DbaseFile::getNumberOfRecords() const
{
    return m_numberOfRecords;
}

int DbaseFile::getNumberOfFields() const
{
    return m_fields.size();
}

bool DbaseFile::hasAllOfTheseFields(QStringList& fieldNames) const
{
    return helpers::containsAll(m_fieldPositionMap, fieldNames);
}

int DbaseFile::getFieldPosition(const QString& fieldName) const
{
    return (m_fieldPositionMap.contains(fieldName)) ?
        m_fieldPositionMap[fieldName] :
        -1;
}

QString DbaseFile::getError() const
{
    return m_error;
}

QString DbaseFile::getFullError() const
{
    return m_fullError;
}

int DbaseFile::expectedFileSize() const
{
    return m_headerLength + (m_numberOfRecords * getRecordLength()) + 1;
}

int DbaseFile::calculateNumberOfFields(int headerLength)
{
    return (headerLength - m_bytesFileInfo - 1) / m_bytesPerField;
}

int DbaseFile::calculateHeaderLength(int numberOfFields)
{
    return numberOfFields * m_bytesPerField + m_bytesFileInfo + 1;
}

void DbaseFile::defineField(DbaseField& field)
{
    m_fields.push_back(field);
    addFieldNameToFieldPositionMap();
}

void DbaseFile::defineField(QString& name, QString& type, int numDecimalPlaces)
{
    m_fields.push_back(DbaseField(name, type, numDecimalPlaces));
    //m_fieldPositionMap[m_fields[i].getName()] = i;
}

void DbaseFile::defineField(const char* name, const char* type, int numDecimalPlaces)
{
    m_fields.push_back(DbaseField(QString(name), QString(type), numDecimalPlaces));
    //m_fieldPositionMap[m_fields[i].getName()] = i;
}

void DbaseFile::addFieldNameToFieldPositionMap()
{
    // index of the last field in the vector m_fields
    int index = m_fields.size();
    m_fieldPositionMap[m_fields[index].getName()] = index;
}

// Calculate the length of one data row in bytes (1 byte separator?)
int DbaseFile::getRecordLength()
{
    int length = 1;

    for (int i = 0; i < m_fields.size(); i++) {
        length += m_fields[i].getFieldLength();
    }

    return length;
}

const QVector<DbaseField>& DbaseFile::getFieldDefinitions() const
{
    return m_fields;
}
